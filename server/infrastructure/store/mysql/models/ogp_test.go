// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testOgps(t *testing.T) {
	t.Parallel()

	query := Ogps()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testOgpsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ogp{}
	if err = randomize.Struct(seed, o, ogpDBTypes, true, ogpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ogp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Ogps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOgpsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ogp{}
	if err = randomize.Struct(seed, o, ogpDBTypes, true, ogpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ogp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Ogps().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Ogps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOgpsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ogp{}
	if err = randomize.Struct(seed, o, ogpDBTypes, true, ogpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ogp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OgpSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Ogps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOgpsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ogp{}
	if err = randomize.Struct(seed, o, ogpDBTypes, true, ogpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ogp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := OgpExists(ctx, tx, o.Date, o.FQDN, o.Host, o.TweetID)
	if err != nil {
		t.Errorf("Unable to check if Ogp exists: %s", err)
	}
	if !e {
		t.Errorf("Expected OgpExists to return true, but got false.")
	}
}

func testOgpsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ogp{}
	if err = randomize.Struct(seed, o, ogpDBTypes, true, ogpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ogp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	ogpFound, err := FindOgp(ctx, tx, o.Date, o.FQDN, o.Host, o.TweetID)
	if err != nil {
		t.Error(err)
	}

	if ogpFound == nil {
		t.Error("want a record, got nil")
	}
}

func testOgpsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ogp{}
	if err = randomize.Struct(seed, o, ogpDBTypes, true, ogpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ogp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Ogps().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testOgpsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ogp{}
	if err = randomize.Struct(seed, o, ogpDBTypes, true, ogpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ogp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Ogps().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testOgpsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ogpOne := &Ogp{}
	ogpTwo := &Ogp{}
	if err = randomize.Struct(seed, ogpOne, ogpDBTypes, false, ogpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ogp struct: %s", err)
	}
	if err = randomize.Struct(seed, ogpTwo, ogpDBTypes, false, ogpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ogp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = ogpOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = ogpTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Ogps().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testOgpsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	ogpOne := &Ogp{}
	ogpTwo := &Ogp{}
	if err = randomize.Struct(seed, ogpOne, ogpDBTypes, false, ogpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ogp struct: %s", err)
	}
	if err = randomize.Struct(seed, ogpTwo, ogpDBTypes, false, ogpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ogp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = ogpOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = ogpTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Ogps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func ogpBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Ogp) error {
	*o = Ogp{}
	return nil
}

func ogpAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Ogp) error {
	*o = Ogp{}
	return nil
}

func ogpAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Ogp) error {
	*o = Ogp{}
	return nil
}

func ogpBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Ogp) error {
	*o = Ogp{}
	return nil
}

func ogpAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Ogp) error {
	*o = Ogp{}
	return nil
}

func ogpBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Ogp) error {
	*o = Ogp{}
	return nil
}

func ogpAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Ogp) error {
	*o = Ogp{}
	return nil
}

func ogpBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Ogp) error {
	*o = Ogp{}
	return nil
}

func ogpAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Ogp) error {
	*o = Ogp{}
	return nil
}

func testOgpsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Ogp{}
	o := &Ogp{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, ogpDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Ogp object: %s", err)
	}

	AddOgpHook(boil.BeforeInsertHook, ogpBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	ogpBeforeInsertHooks = []OgpHook{}

	AddOgpHook(boil.AfterInsertHook, ogpAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	ogpAfterInsertHooks = []OgpHook{}

	AddOgpHook(boil.AfterSelectHook, ogpAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	ogpAfterSelectHooks = []OgpHook{}

	AddOgpHook(boil.BeforeUpdateHook, ogpBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	ogpBeforeUpdateHooks = []OgpHook{}

	AddOgpHook(boil.AfterUpdateHook, ogpAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	ogpAfterUpdateHooks = []OgpHook{}

	AddOgpHook(boil.BeforeDeleteHook, ogpBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	ogpBeforeDeleteHooks = []OgpHook{}

	AddOgpHook(boil.AfterDeleteHook, ogpAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	ogpAfterDeleteHooks = []OgpHook{}

	AddOgpHook(boil.BeforeUpsertHook, ogpBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	ogpBeforeUpsertHooks = []OgpHook{}

	AddOgpHook(boil.AfterUpsertHook, ogpAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	ogpAfterUpsertHooks = []OgpHook{}
}

func testOgpsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ogp{}
	if err = randomize.Struct(seed, o, ogpDBTypes, true, ogpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ogp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Ogps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOgpsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ogp{}
	if err = randomize.Struct(seed, o, ogpDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Ogp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(ogpColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Ogps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOgpsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ogp{}
	if err = randomize.Struct(seed, o, ogpDBTypes, true, ogpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ogp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOgpsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ogp{}
	if err = randomize.Struct(seed, o, ogpDBTypes, true, ogpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ogp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OgpSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOgpsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ogp{}
	if err = randomize.Struct(seed, o, ogpDBTypes, true, ogpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ogp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Ogps().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	ogpDBTypes = map[string]string{`Date`: `date`, `FQDN`: `varchar`, `Host`: `varchar`, `TweetID`: `bigint`, `Type`: `varchar`, `Lang`: `varchar`}
	_          = bytes.MinRead
)

func testOgpsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(ogpPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(ogpAllColumns) == len(ogpPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Ogp{}
	if err = randomize.Struct(seed, o, ogpDBTypes, true, ogpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ogp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Ogps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, ogpDBTypes, true, ogpPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Ogp struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testOgpsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(ogpAllColumns) == len(ogpPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Ogp{}
	if err = randomize.Struct(seed, o, ogpDBTypes, true, ogpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ogp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Ogps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, ogpDBTypes, true, ogpPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Ogp struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(ogpAllColumns, ogpPrimaryKeyColumns) {
		fields = ogpAllColumns
	} else {
		fields = strmangle.SetComplement(
			ogpAllColumns,
			ogpPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := OgpSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testOgpsUpsert(t *testing.T) {
	t.Parallel()

	if len(ogpAllColumns) == len(ogpPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLOgpUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Ogp{}
	if err = randomize.Struct(seed, &o, ogpDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Ogp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Ogp: %s", err)
	}

	count, err := Ogps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, ogpDBTypes, false, ogpPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Ogp struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Ogp: %s", err)
	}

	count, err = Ogps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
