// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testStats(t *testing.T) {
	t.Parallel()

	query := Stats()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testStatsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Stat{}
	if err = randomize.Struct(seed, o, statDBTypes, true, statColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Stat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Stats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStatsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Stat{}
	if err = randomize.Struct(seed, o, statDBTypes, true, statColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Stat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Stats().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Stats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStatsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Stat{}
	if err = randomize.Struct(seed, o, statDBTypes, true, statColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Stat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := StatSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Stats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStatsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Stat{}
	if err = randomize.Struct(seed, o, statDBTypes, true, statColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Stat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := StatExists(ctx, tx, o.Date, o.FQDN, o.Host)
	if err != nil {
		t.Errorf("Unable to check if Stat exists: %s", err)
	}
	if !e {
		t.Errorf("Expected StatExists to return true, but got false.")
	}
}

func testStatsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Stat{}
	if err = randomize.Struct(seed, o, statDBTypes, true, statColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Stat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	statFound, err := FindStat(ctx, tx, o.Date, o.FQDN, o.Host)
	if err != nil {
		t.Error(err)
	}

	if statFound == nil {
		t.Error("want a record, got nil")
	}
}

func testStatsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Stat{}
	if err = randomize.Struct(seed, o, statDBTypes, true, statColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Stat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Stats().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testStatsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Stat{}
	if err = randomize.Struct(seed, o, statDBTypes, true, statColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Stat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Stats().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testStatsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	statOne := &Stat{}
	statTwo := &Stat{}
	if err = randomize.Struct(seed, statOne, statDBTypes, false, statColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Stat struct: %s", err)
	}
	if err = randomize.Struct(seed, statTwo, statDBTypes, false, statColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Stat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = statOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = statTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Stats().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testStatsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	statOne := &Stat{}
	statTwo := &Stat{}
	if err = randomize.Struct(seed, statOne, statDBTypes, false, statColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Stat struct: %s", err)
	}
	if err = randomize.Struct(seed, statTwo, statDBTypes, false, statColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Stat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = statOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = statTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Stats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func statBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Stat) error {
	*o = Stat{}
	return nil
}

func statAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Stat) error {
	*o = Stat{}
	return nil
}

func statAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Stat) error {
	*o = Stat{}
	return nil
}

func statBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Stat) error {
	*o = Stat{}
	return nil
}

func statAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Stat) error {
	*o = Stat{}
	return nil
}

func statBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Stat) error {
	*o = Stat{}
	return nil
}

func statAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Stat) error {
	*o = Stat{}
	return nil
}

func statBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Stat) error {
	*o = Stat{}
	return nil
}

func statAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Stat) error {
	*o = Stat{}
	return nil
}

func testStatsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Stat{}
	o := &Stat{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, statDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Stat object: %s", err)
	}

	AddStatHook(boil.BeforeInsertHook, statBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	statBeforeInsertHooks = []StatHook{}

	AddStatHook(boil.AfterInsertHook, statAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	statAfterInsertHooks = []StatHook{}

	AddStatHook(boil.AfterSelectHook, statAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	statAfterSelectHooks = []StatHook{}

	AddStatHook(boil.BeforeUpdateHook, statBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	statBeforeUpdateHooks = []StatHook{}

	AddStatHook(boil.AfterUpdateHook, statAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	statAfterUpdateHooks = []StatHook{}

	AddStatHook(boil.BeforeDeleteHook, statBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	statBeforeDeleteHooks = []StatHook{}

	AddStatHook(boil.AfterDeleteHook, statAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	statAfterDeleteHooks = []StatHook{}

	AddStatHook(boil.BeforeUpsertHook, statBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	statBeforeUpsertHooks = []StatHook{}

	AddStatHook(boil.AfterUpsertHook, statAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	statAfterUpsertHooks = []StatHook{}
}

func testStatsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Stat{}
	if err = randomize.Struct(seed, o, statDBTypes, true, statColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Stat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Stats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStatsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Stat{}
	if err = randomize.Struct(seed, o, statDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Stat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(statColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Stats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStatsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Stat{}
	if err = randomize.Struct(seed, o, statDBTypes, true, statColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Stat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testStatsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Stat{}
	if err = randomize.Struct(seed, o, statDBTypes, true, statColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Stat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := StatSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testStatsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Stat{}
	if err = randomize.Struct(seed, o, statDBTypes, true, statColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Stat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Stats().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	statDBTypes = map[string]string{`Date`: `date`, `FQDN`: `varchar`, `Host`: `varchar`, `Count`: `int`, `Title`: `varchar`, `Description`: `varchar`, `Image`: `varchar`, `Type`: `varchar`, `Lang`: `varchar`}
	_           = bytes.MinRead
)

func testStatsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(statPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(statAllColumns) == len(statPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Stat{}
	if err = randomize.Struct(seed, o, statDBTypes, true, statColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Stat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Stats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, statDBTypes, true, statPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Stat struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testStatsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(statAllColumns) == len(statPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Stat{}
	if err = randomize.Struct(seed, o, statDBTypes, true, statColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Stat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Stats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, statDBTypes, true, statPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Stat struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(statAllColumns, statPrimaryKeyColumns) {
		fields = statAllColumns
	} else {
		fields = strmangle.SetComplement(
			statAllColumns,
			statPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := StatSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testStatsUpsert(t *testing.T) {
	t.Parallel()

	if len(statAllColumns) == len(statPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLStatUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Stat{}
	if err = randomize.Struct(seed, &o, statDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Stat struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Stat: %s", err)
	}

	count, err := Stats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, statDBTypes, false, statPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Stat struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Stat: %s", err)
	}

	count, err = Stats().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
